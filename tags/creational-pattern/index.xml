<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>creational-pattern on DrGos</title><link>https://drgos.com/tags/creational-pattern/</link><description>Recent content in creational-pattern on DrGos</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://drgos.com/tags/creational-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Factory Pattern</title><link>https://drgos.com/p/factory-pattern/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://drgos.com/p/factory-pattern/</guid><description>Factory pattern or Factory Method Pattern is one of the most basic and most used design patterns in OOP languages. This is a creational type pattern and this pattern provides one of the best ways to create different objects without exposing the creation logic and exposing it using a common interface.
To make it easier to understand, think of a car factory. The car factory produces multiple car types, but you don&amp;rsquo;t know exactly how the cars are produced, how much of the underlying technology and components they share, but you don&amp;rsquo;t care about that.</description></item></channel></rss>